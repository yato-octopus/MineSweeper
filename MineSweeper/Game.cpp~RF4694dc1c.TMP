#include "Game.h"
#include <Siv3D.hpp>

Game::Game() {
	start();
}
void Game::start() {
	state = State::START;
	deploy_bomb();
}
void Game::update() {
	switch (state) {
	case State::START:
		if (Input::KeySpace.clicked) {
			state = State::GAME;
		}
		break;
	case State::GAME:
		if (Input::KeyR.clicked) {
			state = State::CLEAR;
		}
		break;
	case State::CLEAR:
		if (Input::KeySpace.clicked) {
			game_end();
			start();
		}
		break;
	case State::END:
		if (Input::KeySpace.clicked) {
			game_end();
			start();
		}
	}
}
void Game::draw() {
	static Font fontS(30);

	switch (state) {
	case State::START:
		fontS(L"マインスイーパー").drawCenter(100 - fontS.ascent);
		fontS(L"すたーと").drawCenter(300, Palette::Yellow);
		break;
	case State::GAME:
		map_draw();
		break;
	case State::CLEAR:
		fontS(L"げーむくりあー").drawCenter(200, Palette::Yellow);
		break;
	case State::END:
		fontS(L"げーむおーばー").drawCenter(200, Palette::Yellow);
		break;
	}
}
void Game::game_count() {
	int hoge[4] = { 1,0,-1,0 };
	int huga[4] = { 0,1,0,-1 };
	int piyo[4] = { -1,-1,1,1 };
	int fooo[4] = { -1,1,-1,1 };

	for (int n = 1; n <= 8; n++) {
		for (int j = 1; j <= 8; j++) {
			//八方向の爆弾の個数をカウント
			for (int i = 0; i < 4; i++) {
				if (col[n + hoge[i]][j + huga[i]] == 3) {
					bomb_count[n][j] += 1;
				}
				if (col[n + piyo[i]][j + fooo[i]] == 3) {
					bomb_count[n][j] += 1;
				}
			}
			//それぞれの状態の個数をカウント
			switch (col[n][j]) {
			case 0:
				sum[0]++;
				break;
			case 1:
				sum[1]++;
				break;
			case 2:
				sum[2]++;
				break;
			case 3:
				sum[3]++;
				break;
			}
		}
	}
}
void Game::open(int n, int j) {
	int hoge[4] = { 1,0,-1,0 };
	int huga[4] = { 0,1,0,-1 };
	int piyo[4] = { -1,-1,1,1 };
	int fooo[4] = { -1,1,-1,1 };
	int check = 0;
	//八方向の爆弾の個数をカウント
	for (int i = 0; i < 4; i++) {
		if (col[n + hoge[i]][j + huga[i]] == 3) {
			check += 1;
		}
		if (col[n + piyo[i]][j + fooo[i]] == 3) {
			check += 1;
		}
	}
	if (col[n][j] == 1 || n<1 || n>8 || j<1 || j>8) {
		return;
	}
	col[n][j] = 1;
	sum[0] -= 1;
	if (!(col[n][j] == 3) && !(col[n][j] == 2) && check == 0) {     // そこに爆弾が無く、周りにも爆弾が無い場合
		open(n - 1, j - 1);      // 周りも開く
		open(n, j - 1);
		open(n + 1, j - 1);
		open(n - 1, j);
		open(n + 1, j);
		open(n - 1, j + 1);
		open(n, j + 1);
		open(n + 1, j + 1);
	}
}
void Game::check(int n, int j) {
	const Rect rect(8 + rect_x, 80 + rect_y, 42, 42);
	const bool right = rect.rightPressed;
	const bool left = rect.leftPressed;

	//ループで表示した正方形のあたり判定
	/*if (right == 1&&flag[n][j] == 0) {
	flag[n][j] = 1;
	}
	if (right == 1&&flag[n][j] == 1) {
	flag[n][j] = 0;
	}*/
	if (left) {
		if (hoge == 0) {
			while (1) {
				game_end();
				deploy_bomb();
				if (bomb_count[n][j] == 0) {
					break;
				}
			}
			hoge++;
		}
		switch (col[n][j]) {
		case 0:
			open(n, j);
			break;
		case 3:
			col[n][j] = 2;
			state = END;
			break;
		}
	}
	//ゲーム終了
	if (sum[0] == 0) {
		state = CLEAR;
	}
}
void Game::map_draw() {
	static Font fontS(30);
	static Font font(0.1);
	static Image image(L"Example/Bomb.jpeg");
	static Texture texture(image);
	int Line_x = 4;
	int Line_y = 76;
	rect_x = 0;
	rect_y = 0;
	//ゲーム画面上部
	Rect(0, 0, 408, 72).draw(Palette::Black);
	fontS(L"Reset").draw(250, 0, Palette::Skyblue);
	//ゲーム画面
	for (int n = 1; n <= 8; n++) {
		for (int j = 1; j <= 8; j++) {
			check(n, j);
			/*case0:爆弾無し
			case1:爆弾無し(空け)
			case2:爆弾あり(空け）
			case3:爆弾あり*/
			switch (col[n][j]) {
			case 0:
				Rect(8 + rect_x, 80 + rect_y, 42, 42).draw(Palette::Blue);
				break;
			case 1:
				if (bomb_count[n][j] == 0) {
					font(L"").draw(8 + rect_x, 80 + rect_y);
				}
				else {
					font(L" ", bomb_count[n][j]).draw(8 + rect_x, 80 + rect_y);
				}
				break;
			case 2:
				texture.draw(8 + rect_x, 80 + rect_y);
				break;
			case 3:
				Rect(8 + rect_x, 80 + rect_y, 42, 42).draw(Palette::Blue);
				break;
			}
			rect_x += 50;
		}
		rect_x = 0;
		rect_y += 50;
	}
	//ゲームライン
	for (int i = 1; i <= 9; i++) {
		Line(0, Line_y, 520, Line_y).draw(8, Palette::Skyblue);
		Line_y += 50;
		Line(Line_x, 80, Line_x, 480).draw(8, Palette::Skyblue);
		Line_x += 50;
	}
}
void Game::game_end() {
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			col[i][j] = 0;
			bomb_count[i][j] = 0;

		}
	}
	for (int k = 0; k < 4; k++) {
		sum[k] = 0;
	}
}
void Game::deploy_bomb() {
	int before, after;

	for (int j = 0; j < 8; j++) {
		before = (Random(1, 8));
		after = (Random(1, 8));
		col[before][after] = 3;
	}
	game_count();
}